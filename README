# Projet semestriel E-commerce 4IW - Second semestre 2024

## Containerisation

Notre projet fonctionne avec Docker pour faciliter le déploiement et le partage des nouveautés.

## Architecture

Le projet comprend 4 composantes :

- Le backend (serveur Node API)
- Le frontend (application Vue)
- Les bases de données (MongoDB & PostgreSQL)
- Le serveur web (Nginx)

### Lancement local

Pour lancer en local, il faut :

- Créer un fichier `.env` à la racine :
    ```txt
    NODE_ENV=development
    ```

- Créer les fichiers `.env` dans les sous-dossiers `backend` et `frontend` selon les `.env.example` respectifs.

- Lancer Docker Compose :
    ```bash
    docker-compose up
    ```

- Lancer les migrations :
    ```bash
    docker-compose run backend npx sequelize-cli db:migrate
    ```

En développement, vous pouvez accéder à l'API sur http://localhost
et au frontend sur http://localhost:5173.

### Lancement en production

Pour lancer en production, il faut :

- Créer un fichier `.env` à la racine :
    ```txt
    NODE_ENV=development # garder development pour le moment
    ```

- Créer les fichiers `.env` dans les sous-dossiers `backend` et `frontend` selon les `.env.example`.

- Lancer Docker Compose :
    ```bash
    docker-compose up
    ```

- Transpiler le backend :
    ```bash
    docker-compose run backend npm run build
    ```

- Builder le frontend :
    ```bash
    docker-compose run frontend npm run build
    ```

- Modifier le fichier `.env` à la racine :
    ```txt
    NODE_ENV=production # changer cette variable a un impact sur la base de données utilisée et sur le lancement du serveur backend
    ```

- Arrêter Docker Compose :
    ```bash
    docker-compose down
    ```

- Relancer Docker Compose avec uniquement Nginx (Nginx sert par défaut le `frontend/dist`, améliorant les performances) :
    ```bash
    docker-compose up backend # lance Nginx, le backend et les bases de données
    ```

## GitHub Actions -> Tests et Déploiement

Nous avons deux actions GitHub :

### Les tests (backend uniquement)

Les tests sont lancés à chaque ouverture de PR, et sont relancés à chaque push sur une PR.
Fichier : `/github/workflows/backend-test.yml`

### Le déploiement

Le déploiement suit globalement les étapes décrites dans la section "Lancement en production". Il build le backend et le frontend au niveau du job GitHub pour ne pas charger notre serveur et profiter des ressources de leur serveur. Ensuite, il upload les artefacts sur notre serveur de production et déploie l'application en lançant uniquement Nginx, le backend et les bases de données.
